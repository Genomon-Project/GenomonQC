#! /usr/bin/python
"""

Calculate coverage


"""

import sys
import os
from datetime import datetime
import argparse
import random
import subprocess

#
# Subroutines
#

def PrintHeader( myself, arg ):
    now = datetime.now()

    #print '#' * 84
    #print '# Summary'
    #print '# Generated by %(my)s' % { 'my': myself }
    #print '# %(y)d.%(m)d.%(d)d.%(h)d:%(m)d' % { 'y': now.year, 'm': now.month, 'd': now.day, 'h': now.hour, 'm': now.minute }
    #print '#' * 84 + ''
    print 'input_file:\t{input_file} '.format( input_file = arg.input_file )
    print 'output_file:\t{output_file} '.format( output_file = arg.output_file )


#
# Main
#
def main():

#
# Argument parse
#
    argvs = sys.argv
    myself = argvs[ 0 ]
    argc = len(argvs)

    parser = argparse.ArgumentParser( description = "Calculate coverage" )
    parser.add_argument( '-i', '--input_file',  help = "Input text file",  type = str )
    parser.add_argument( '-o', '--output_file', help = "Output text file", type = str )

    arg = parser.parse_args()
    if not arg.input_file:
        print parser.print_help();
        sys.exit( 1 )

    #
    # Print header
    #
    PrintHeader( myself, arg )

    data = []
    data_num = 0
    try:
        with open( arg.input_file ) as f:
            first_line = True
            for line in f:
                if first_line:
                    line_header = line.split( "\t" )
                    first_line = False
                else:
                    line_list = line.split( "\t" )
                    data_num += 1
                    for i in range( 0, len(line_list) ):
                        if i == len( data ):
                            data.append( float( line_list[ i ] ) )
                        else:
                            data[ i ] += float( line_list[ i ] )

        id_total = None
        for i in range( 0, len( line_header ) ):
            if id_total == None and line_header[ i ].find( 'non-N_bases' ) != -1:
                id_total = i
            if line_header[ i ].find( '_ratio' ) != -1:
                data[ i ] = data[ i - 1 ] / data[ id_total ]
        #
        # Output result
        #
        w = open( arg.output_file, 'w' )
        w.write( '\t'.join( line_header ) )
        w.write( '\t'.join( str(x) for x in data ) )
        w.write( "\n" )

    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print( "Unexpected error: {error}".format( error = sys.exc_info()[0] ) )
        print("{0}: {1}:{2}".format( exc_type, fname, exc_tb.tb_lineno) )



if __name__ == "__main__":
    main()


