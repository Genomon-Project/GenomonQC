#! /usr/bin/env python
# -*- coding: utf-8 -*-

"""
Created on Thu Oct 20 11:50:54 2016

@author: okada
"""

def main():
    import argparse
    from genomon_qc import __version__
    import genomon_qc.run

    prog = "genomon_qc"
    parser = argparse.ArgumentParser(prog = prog)
    parser.add_argument("--version", action = "version", version = prog + "-" + __version__)
    subparsers = parser.add_subparsers()

    
    ##########
    # wgs 
    wgs_parser = subparsers.add_parser("wgs", help = "calc coverage for wgs.")
    wgs_parser.add_argument("input_file", help = "path ti input bam", type = str)
    wgs_parser.add_argument("output_file", help = "path to output file", type = str)
    wgs_parser.add_argument("--genome_size_file", help = "path to the bedtools-2.24.0/genomes/human.hg19.genome", type = str, default = "")
    wgs_parser.add_argument("--gaptxt", help = "path to the gat.txt", type = str, default = "")
    wgs_parser.add_argument("--incl_bed_width", help = "bps for normalize incl_bed (bedtools chuffle -incl)", type = int, default = -1)
    wgs_parser.add_argument("--i_bed_lines", help = "line number of target bed file.", type = int, default = -1)
    wgs_parser.add_argument("--i_bed_width", help = "bps par 1 line, number of target bed file.", type = int, default = -1)
    wgs_parser.add_argument("--grc_flag", help = "set with GRCh reference (no chr)", action='store_true')
    wgs_parser.add_argument("--ld_library_path", help = "LD_LIBRARY_PATH", type = str, default = "")
    wgs_parser.add_argument("--bedtools", help = "path to installed BEDTOOLS", type = str, default = "")
    wgs_parser.add_argument("--samtools", help = "path to installed SAMTOOLS", type = str, default = "")
    wgs_parser.add_argument("--samtools_params", help = "SAMTOOL's parameters", type = str, default = "")
    wgs_parser.add_argument("--coverage_text", help = "coverage_depth text separated with comma", type = str, default = "")
    wgs_parser.add_argument("--config_file", help = "path to config file. use this file insead of specify above parameters.", type = str, default = "")
    wgs_parser.add_argument("--del_tempfile", help = "delete flg to temporary file", action='store_true')
    wgs_parser.set_defaults(func = genomon_qc.run.wgs_main)
    ##########
    # exome 
    exome_parser = subparsers.add_parser("exome", help = "calc coverage for exome.")
    exome_parser.add_argument("input_file", help = "path to input bam", type = str)
    exome_parser.add_argument("output_file", help = "path to output file", type = str)
    exome_parser.add_argument("--bait_file", help = "path to the bait_file", type = str, default = "")
    exome_parser.add_argument("--ld_library_path", help = "LD_LIBRARY_PATH", type = str, default = "")
    exome_parser.add_argument("--bedtools", help = "path to installed BEDTOOLS", type = str, default = "")
    exome_parser.add_argument("--samtools", help = "path to installed SAMTOOLS", type = str, default = "")
    exome_parser.add_argument("--samtools_params", help = "SAMTOOL's parameters", type = str, default = "")
    exome_parser.add_argument("--coverage_text", help = "coverage_depth text separated with comma", type = str, default = "")
    exome_parser.add_argument("--config_file", help = "path to config file. use this file insead of specify above parameters.", type = str, default = "")
    exome_parser.add_argument("--del_tempfile", help = "delete flg to temporary file", action='store_true')
    exome_parser.set_defaults(func = genomon_qc.run.exome_main)
    ##########
    # bamstat 
    bamstats_parser = subparsers.add_parser("bamstats", help = "bamstat.")
    bamstats_parser.add_argument("input_file", help = "path to input bam", type = str)
    bamstats_parser.add_argument("output_file", help = "path to output file", type = str)
    bamstats_parser.add_argument("--perl5lib", help = "PERL5LIB", type = str, default = "")
    bamstats_parser.add_argument("--perl", help = "directory path to bin/perl", type = str, default = "")
    bamstats_parser.add_argument("--bamstats", help = "installed file path of bamstats", type = str, default = "")
    bamstats_parser.add_argument("--config_file", help = "path to config file. use this file insead of specify above parameters.", type = str, default = "")
    bamstats_parser.set_defaults(func = genomon_qc.run.bamstats_main)
    ##########
    # merge 
    merge_parser = subparsers.add_parser("merge", help = "merge coverage and bamstat.")
    merge_parser.add_argument("coverage_file", help = "path to coverage result file, created by wgs or exome.", type = str)
    merge_parser.add_argument("bamstats_file", help = "path to bamstats result file, created by bamstats.", type = str)
    merge_parser.add_argument("output_file", help = "path to output file", type = str)
    merge_parser.add_argument("--config_file", help = "path to config file. use this file insead of specify above parameters.", type = str, default = "")
    merge_parser.add_argument("--meta", help = "meta data", type = str, default = "")
    merge_parser.set_defaults(func = genomon_qc.run.merge_main)
    ##########
    
    import sys
    argv = sys.argv[1:]
    if len(argv) < 1:
        argv = [""]
    args = parser.parse_args(argv)

    try:
        args.func(args)
    except genomon_qc.run.InputError as e:
        print (e.message)

if __name__ == "__main__":
    main()
    
